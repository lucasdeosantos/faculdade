Lucas Emanuel de Oliveira Santos 20224379
Frank Wolff Hannemann 20224758

	Para a implementação da árvore AVL foi criada uma estrutura de dados que contém os seguintes componentes: chave, filho esquerdo, filho direito, pai, altura e nível. A altura foi incluída na estrutura de dados para facilitar o balanceamento da árvore, já que o balanceamento de um nodo é balanço = altura(filhoDireito) - altura(filhoEsquerdo). Então, se mantivermos a altura dos nodos correta, o calculo do balanceamento vai ser sempre uma operação de subtração. Para isso, foi criada a função atualizaAltura(), essa função garante que a altura de um nodo estará correta após a execução. A função atualiza a altura do nodo com altura = max(altura(filhoDireito), altura(FilhoEsquerdo)) + 1, assim, o custo de atualizar a altura de um nodo é apenas uma operação de adição.
	Nas primeiras tentativas de implementação foi utilizada uma variável balanço, mas o cálculo da altura sempre acabava sendo necessário, principalmente pra corrigir o balancemanto após rotações e remoções de nodos, com isso, o custo das operações aumentava, pois para calcular a altura é preciso percorre a árvore para baixo. Então, ao adicionar a altura na estrutura, náo é preciso calcular a mesma, o que evita qualquer aumento no custo das operações e garante que o cálculo do balanceamento de um nodo será sempre constante.
	A inserção é feita encontrando a posição onde o nodo deve ser inserido. Após a inserção, corrige o balanço da árvore através da função corrigirBalanco(), essa função chama a funcao atualizaAltura() para atualizar a altura do nodo e garantir que a mesma está correta, em seguida, chama a funcao balancear() que testa se o nodo está balanceado, se estiver, prossegue recursivamente para o próximo nodo a ser balanceado, senão, corrige o balanço da árvore. O próximo nodo a ser balanceado sempre será o pai do nodo atual, a função retorna depois de corrigir o balanceamento da raiz. Essa função garante que a altura dos nodos está sempre correta, pois, sempre que um nodo é adicionado, corrige a altura dos pais do mesmo. Vale ressaltar que a função corrigirBalanco() recebe o pai do nodo ao final da inserção, pois a altura de um nodo que acabou de ser inserido sempre será zero e consequentemente, ele sempre estará balanceado.
	O custo da função corrigirBalanco() é o custo de atualizaAltura() de um nodo + o custo de balancear() um nodo, desde o nodo desbalanceado até a raiz, o que nunca vai ser maior que log 2 n, pois, o valor de atualizaAltura() e balancear() um nodo é constante, ou seja, as inserções e exclusões sempre serão O(log 2 n).
	A função balancear() testa se a árvore está pendendo pra direita ou pra esquerda, se estiver pedendo pra direita e a sub-árvore direita estiver pendendo pra esquerda, faz uma rotação dupla esquerda, senão, faz uma rotação simples esquerda. Se a árvore estiver pendendo pra esquerda e a sub-árvore esquerda estiver pendendo pra direita, faz uma rotação dupla direita, do contrário, faz uma rotação simples direita. Se a árvore não estiver pendendo pra nenhum lado, o nodo está equilibrado, consequentemente, a função não faz nada. Para descobrir o balanço de um nodo e decidir se ele está ou não pendendo pra algum lado, a função balancear() chama a função balanco() que retorna o balanço de um nodo.
	A exclusão de um nodo possui três casos diferentes, se o nodo a ser removido for uma folha, então, simplesmente libera a memória alocada para aquele nodo. Se o nodo tiver apenas um filho, transplanta o filho para o lugar dele e libera a memória alocada, por fim, se o nodo tiver dois filhos, encontra o antecessor, transplanta o mesmo para o lugar do nodo e libera a memória alocada. O antecessor nesse caso sempre será o filho mais a direita da sub-árvore esquerda, pois, o único jeito do antecessor não estar na sub-árvore esquerda seria se ele não tivesse sub-árvore esquerda, o que entraria no caso de quando o nodo tem apenas um filho. Antes de liberar a memória em todos os casos, corrige os ponteiros dos nodos envolvidos na remoção.
	Ao final da execução da exclusão, chama a função corrigirBalanco() para balancear a arvóre caso a remoção do nodo gere algum desbalanceamento na árvore. Quando o nodo não tem filhos ou tem apenas um filho, corrige o balanço a partir do pai do nodo removido, isso acontece pois a altura do nodo que foi transplantado não vai mudar, consequentemente o balanço não irá mudar. No caso do nodo possuir dois filhos e o antecessor ser filho do nodo, o mesmo pode ter sua altura completamente alterada, então, corrige o balanço a partir dele. Já quando o antecessor não é filho do nodo que foi removido, começa o balanço a partir do pai dele.
	No geral o nodo enviado para a função corrigirBalanco() sempre será o primeiro nodo que pode ter sua altura e balanço alterados pela operação que foi realizada.
	Para a impressão em largura foi criada à biblioteca fila.h, nessa biblioteca estão as duas estruturas de dados utilizadas na fila, o nodo da fila contém uma estrutura nodo(que será o nodo impresso pela funcão) e um ponteiro para o próximo nodo fila. A estrutura fila contém um ponteiro para o primeiro nodo da fila e um ponteiro para o final da fila, além de uma variável tamanho para facilitar as operações. A variável nível, assim como a variável altura, foi incluída para evitar calculos desnecessários, pois sem ela na estrutura é preciso calcular o nível recursivamente, o que aumentaria o custo da impressão. A função atualizaNivel() custa apenas uma operação de soma, consequentemente, a impressão não precisa fazer nenhuma chamada recursiva para cima na árvore e o custo da mesma continua sendo O(n).
